View(a)
b=eigen(X %*% R %*% t(R) %*% t(X))
View(b)
View(PPT_e)
View(PTP_e)
View(XTX_e)
View(XXT_e)
View(PTP_e)
View(PPT_e)
View(XTX_e)
View(XXT_e)
solve(R)
install.packages('matlib')
?inv
??inv
?ginv
ginv(R)
dim(ginv(R))
dim(R)
c=U %*% t(U) %*% X
View(c)
View(D)
View(U1)
View(U)
View(D)
View(v1)
View(V)
View(v1)
View(U)
a=U %*% D
View(a)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(glmnet) # ridge and lasso
library(gam) # for gam
library(pls) # pcr pls
library(leaps) # regsubset
library(MASS) # lda qda
library(class) # knn
library(caret) # knn with prob
library(gbm) # boosting
library(boot) # cross validation
library(car) # vif, residual plots, partial residual plots
library (ROCR)
library (pROC) # ROC AUC plot
library(tree)
library(randomForest)
library(ranger) # Random Forest
library(neuralnet) # DNN
library(e1071) # SVM
library(RandPro) # Random Projection Method 1
library(pryr) # memory count
library(MatrixModels) # sparse matrix representation
set.seed(1)
setwd("D:\\Merck challenge\\qsar_rp")
df1_x = read_csv("result7rp1a7.csv")
df1=cbind(y,df1_x[,-1])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(glmnet) # ridge and lasso
library(gam) # for gam
library(pls) # pcr pls
library(leaps) # regsubset
library(MASS) # lda qda
library(class) # knn
library(caret) # knn with prob
library(gbm) # boosting
library(boot) # cross validation
library(car) # vif, residual plots, partial residual plots
library (ROCR)
library (pROC) # ROC AUC plot
library(tree)
library(randomForest)
library(ranger) # Random Forest
library(neuralnet) # DNN
library(e1071) # SVM
library(RandPro) # Random Projection Method 1
library(pryr) # memory count
library(MatrixModels) # sparse matrix representation
setwd("D:\\Merck challenge\\qsar_train")
x = read_csv("D:\\Merck challenge\\qsar_train\\QSAR_7_train_x.csv")
y = read_csv("D:\\Merck challenge\\qsar_train\\QSAR_7_train_y.csv")
# df=cbind(y,x)
# ptm = proc.time()
# rf.cv0=rfcv(df[,-1],df$y,cv.fold = 5)
# time_spent = proc.time() - ptm
#
# rf.cv0$error.cv
# time_spent[3]
#
# fit0=randomForest(y~., data=df)
# VI_F0=randomForest::importance(fit0)
# o_rk9=order(-VI_F0)[1:9]
# o_rk34=order(-VI_F0)[1:34]
set.seed(1)
setwd("D:\\Merck challenge\\qsar_rp")
df1_x = read_csv("result7rp1a7.csv")
df1=cbind(y,df1_x[,-1])
ptm = proc.time()
rf.cv=rfcv(df1[,-1],df1$y,cv.fold = 5)
time_spent = proc.time() - ptm
fit=randomForest(y~., data=df1)
VI_F=randomForest::importance(fit)
time_spent
sqrt(rf.cv$error.cv) # RMSE
VI_F
rpm=read_csv("7rp1a7.csv")
rpm=rpm[,-1]
pm.indx=order(-VI_F)[1:100] # 26 or 104
coef.mx=rpm[,pm.indx] # find influential rows
# e=which(x!=0,arr.ind = T)
# f=colSums(x != 0)
View(X)
View(coef.mx)
?rowsum
rowsum(coef.mx)
?rowSums
rowSums(coef.mx)
order(-rowSums(coef.mx))[1:10]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(glmnet) # ridge and lasso
library(gam) # for gam
library(pls) # pcr pls
library(leaps) # regsubset
library(MASS) # lda qda
library(class) # knn
library(caret) # knn with prob
library(gbm) # boosting
library(boot) # cross validation
library(car) # vif, residual plots, partial residual plots
library (ROCR)
library (pROC) # ROC AUC plot
library(tree)
library(randomForest)
library(ranger) # Random Forest
library(neuralnet) # DNN
library(e1071) # SVM
library(RandPro) # Random Projection Method 1
library(pryr) # memory count
library(MatrixModels) # sparse matrix representation
setwd("D:\\Merck challenge\\qsar_train")
x = read_csv("D:\\Merck challenge\\qsar_train\\QSAR_1_train_x.csv")
y = read_csv("D:\\Merck challenge\\qsar_train\\QSAR_1_train_y.csv")
set.seed(1)
setwd("D:\\Merck challenge\\qsar_rp")
df1_x = read_csv("result1rp1a7.csv")
df1=cbind(y,df1_x[,-1])
fit=randomForest(y~., data=df1)
VI_F=randomForest::importance(fit)
rpm=read_csv("1rp1a7.csv")
rpm=rpm[,-1]
pm.indx=order(-VI_F)[1:100] # 26 or 104
coef.mx=rpm[,pm.indx] # find influential rows
order(-rowSums(coef.mx))[1:10]
# e=which(x!=0,arr.ind = T)
# f=colSums(x != 0)
View(VI_F)
View(rpm)
?abs
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(glmnet) # ridge and lasso
library(gam) # for gam
library(pls) # pcr pls
library(leaps) # regsubset
library(MASS) # lda qda
library(class) # knn
library(caret) # knn with prob
library(gbm) # boosting
library(boot) # cross validation
library(car) # vif, residual plots, partial residual plots
library (ROCR)
library (pROC) # ROC AUC plot
library(tree)
library(randomForest)
library(ranger) # Random Forest
library(neuralnet) # DNN
library(e1071) # SVM
library(RandPro) # Random Projection Method 1
library(pryr) # memory count
library(MatrixModels) # sparse matrix representation
order(-rowSums(abs(coef.mx)))[1:10]
pm.indx=order(-VI_F)[1:20] # 26 or 104
coef.mx=rpm[,pm.indx] # find influential rows
order(-rowSums(abs(coef.mx)))[1:10]
# e=which(x!=0,arr.ind = T)
# f=colSums(x != 0)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(glmnet) # ridge and lasso
library(gam) # for gam
library(pls) # pcr pls
library(leaps) # regsubset
library(MASS) # lda qda
library(class) # knn
library(caret) # knn with prob
library(gbm) # boosting
library(boot) # cross validation
library(car) # vif, residual plots, partial residual plots
library (ROCR)
library (pROC) # ROC AUC plot
library(tree)
library(randomForest)
library(ranger) # Random Forest
library(neuralnet) # DNN
library(e1071) # SVM
library(RandPro) # Random Projection Method 1
library(pryr) # memory count
library(MatrixModels) # sparse matrix representation
setwd("D:\\Merck challenge\\qsar_train")
x = read_csv("D:\\Merck challenge\\qsar_train\\QSAR_7_train_x.csv")
y = read_csv("D:\\Merck challenge\\qsar_train\\QSAR_7_train_y.csv")
df=cbind(y,x)
ptm = proc.time()
rf.cv0=rfcv(df[,-1],df$y,cv.fold = 5)
time_spent = proc.time() - ptm
rf.cv0$error.cv
time_spent[3]
fit0=randomForest(y~., data=df)
VI_F0=randomForest::importance(fit0)
o_rk9=order(-VI_F0)[1:9]
o_rk34=order(-VI_F0)[1:34]
o_rk34
a  <-  data.frame(x = rep(1, 5), y = rep(1, 5))
View(a)
a/c(1,2)
a/colSums(a)
a  <-  data.frame(x = rep(1, 5), y = rep(2, 5))
a/c(1,2)
a/colSums(a)
apply(a,2,function(x){x/sum(x)})
apply(a,1,function(x){x/sum(x)})
apply(a,3,function(x){x/sum(x)})
?apply
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(glmnet) # ridge and lasso
library(gam) # for gam
library(pls) # pcr pls
library(leaps) # regsubset
library(MASS) # lda qda
library(class) # knn
library(caret) # knn with prob
library(gbm) # boosting
library(boot) # cross validation
library(car) # vif, residual plots, partial residual plots
library (ROCR)
library (pROC) # ROC AUC plot
library(tree)
library(randomForest)
library(ranger) # Random Forest
library(neuralnet) # DNN
library(e1071) # SVM
library(RandPro) # Random Projection Method 1
library(pryr) # memory count
library(MatrixModels) # sparse matrix representation
set.seed(1)
setwd("D:\\Merck challenge\\qsar_rp")
df1_x = read_csv("result7rp1a7.csv")
df1=cbind(y,df1_x[,-1])
fit=randomForest(y~., data=df1)
VI_F=randomForest::importance(fit)
rpm=read_csv("7rp1a7.csv")
rpm=rpm[,-1]
pm.indx=order(-VI_F)[1:100] # 26 or 104
coef.mx=rpm[,pm.indx] # find influential rows
coef.mx=apply(coef.mx,2,function(x){x/sum(x)})
order(-rowSums(abs(coef.mx)))[1:10]
# e=which(x!=0,arr.ind = T)
# f=colSums(x != 0)
pm.indx=order(-VI_F)[1:20] # 26 or 104
coef.mx=rpm[,pm.indx] # find influential rows
coef.mx=apply(coef.mx,2,function(x){x/sum(x)})
order(-rowSums(abs(coef.mx)))[1:10]
# e=which(x!=0,arr.ind = T)
# f=colSums(x != 0)
View(coef.mx)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(glmnet) # ridge and lasso
library(gam) # for gam
library(pls) # pcr pls
library(leaps) # regsubset
library(MASS) # lda qda
library(class) # knn
library(caret) # knn with prob
library(gbm) # boosting
library(boot) # cross validation
library(car) # vif, residual plots, partial residual plots
library (ROCR)
library (pROC) # ROC AUC plot
library(tree)
library(randomForest)
library(ranger) # Random Forest
library(neuralnet) # DNN
library(e1071) # SVM
library(RandPro) # Random Projection Method 1
library(pryr) # memory count
library(MatrixModels) # sparse matrix representation
U%*%D
a=U%*%D
View(a)
order(-rowSums(abs(a)))[1:10]
b=u%*%d
order(-rowSums(abs(b)))[1:10]
order(-rowSums(abs(b)))[1:33]
order(-rowSums(abs(a)))[1:33]
order(-colSums(abs(b)))[1:33]
order(-colSums(abs(a)))[1:33]
?scale
setwd("D:\\Merck challenge\\qsar_train")
X = read_csv("D:\\Merck challenge\\qsar_train\\QSAR_7_train_x.csv")
Y = read_csv("D:\\Merck challenge\\qsar_train\\QSAR_7_train_y.csv")
# df=cbind(Y,X)
setwd("D:\\Merck challenge\\qsar_rp")
P = read_csv("result7rp1g3.csv")
P=P[,-1]
R = read_csv("7rp1g3.csv")
R = R[,-1]
# df1=cbind(Y,P[,-1])
P= as.matrix(P)
X= as.matrix(X)
R= as.matrix(R)
P = scale(P, center = TRUE, scale = TRUE)
S = svd(P)
D = diag(S$d)
U = S$u
V = S$v
X = scale(X, center = TRUE, scale = TRUE)
s = svd(X)
d = diag(s$d)
u = s$u
v = s$v
a=U%*%D
b=u%*%d
order(-colSums(abs(a)))[1:33]
order(-colSums(abs(b)))[1:33]
order(-rowSums(abs(a)))[1:10]
order(-rowSums(abs(b)))[1:10]
?randomForest::importance
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggthemes)
library(glmnet) # ridge and lasso
library(gam) # for gam
library(pls) # pcr pls
library(leaps) # regsubset
library(MASS) # lda qda
library(class) # knn
library(caret) # knn with prob
library(gbm) # boosting
library(boot) # cross validation
library(car) # vif, residual plots, partial residual plots
library (ROCR)
library (pROC) # ROC AUC plot
library(tree)
library(randomForest)
library(ranger) # Random Forest
library(neuralnet) # DNN
library(e1071) # SVM
library(RandPro) # Random Projection Method 1
library(pryr) # memory count
library(MatrixModels) # sparse matrix representation
setwd("D:\\Merck challenge\\qsar_train")
x = read_csv("D:\\Merck challenge\\qsar_train\\QSAR_7_train_x.csv")
y = read_csv("D:\\Merck challenge\\qsar_train\\QSAR_7_train_y.csv")
df=cbind(y,x)
ptm = proc.time()
rf.cv0=rfcv(df[,-1],df$y,cv.fold = 5)
time_spent = proc.time() - ptm
rf.cv0$error.cv
time_spent[3]
fit0=randomForest(y~., data=df)
VI_F0=randomForest::importance(fit0)
o_rk9=order(-VI_F0)[1:9]
o_rk34=order(-VI_F0)[1:34]
View(VI_F0)
o_rk34
VI_F1=randomForest::importance(fit0,type=1)
View(VI_F1)
VI_F1=randomForest::importance(fit0,type=2)
fit0=randomForest(y~., data=df, importance=TRUE)
VI_F1=randomForest::importance(fit0,type=1)
View(VI_F1)
VI_F2=randomForest::importance(fit0,type=2)
rf.cv0$error.cv
order(-VI_F0)[1:34]
order(-VI_F1)[1:34]
order(-VI_F2)[1:34]
set.seed(1)
setwd("D:\\Merck challenge\\qsar_rp")
df1_x = read_csv("result7rp1a7.csv")
df1=cbind(y,df1_x[,-1])
ptm = proc.time()
rf.cvrp=rfcv(df1[,-1],df1$y,cv.fold = 5)
time_spent = proc.time() - ptm
fit=randomForest(y~., data=df1, importance=TRUE)
VI_F=randomForest::importance(fit,type=1)
time_spent
sqrt(rf.cvrf$error.cv) # RMSE
sqrt(rf.cvrp$error.cv) # RMSE
order(-VI_F)[1:14]
rpm=read_csv("7rp1a7.csv")
setwd("D:\\Merck challenge\\qsar_rp")
rpm=read_csv("7rp1a7.csv")
setwd("D:\\Merck challenge\\qsar_rp")+rpm=read_csv("7rp1a7.csv")
setwd("D:\\Merck challenge\\qsar_rp")rpm=read_csv("7rp1a7.csv")
setwd("D:\\Merck challenge\\qsar_rp")rpm=read_csv("7rp1a7.csv")
setwd("D:\\Merck challenge\\qsar_rp")
rpm=read_csv("7rp1a7.csv")
rpm=rpm[,-1]
pm.indx=order(-VI_F)[1:14] # 26 or 104
coef.mx=rpm[,pm.indx] # find influential rows
order(-rowSums(coef.mx))[1:10]
coef.mx=apply(coef.mx,2,function(x){x/sum(x)})
order(-rowSums(coef.mx))[1:14]
df1_x=df1_x[,-1]
coef.mx1=df1_x[,pm.indx] # find influential rows
coef.mx1=apply(coef.mx1,2,function(x){x/sum(x)})
order(-rowSums(coef.mx1))[1:14]
coef.mx1=df1_x[,pm.indx] # find influential rows
order(-rowSums(coef.mx1))[1:14]
order(-rowSums(coef.mx))[1:34]
order(-rowSums(coef.mx1))[1:34]
order(-rowSums(abs(coef.mx)))[1:34]
order(-rowSums(abs(coef.mx1)))[1:34]
coef.mx=apply(coef.mx,2,function(x){x/sum(abs(x))})
order(-rowSums(abs(coef.mx)))[1:34]
coef.mx1=apply(coef.mx1,2,function(x){x/sum(abs(x))})
order(-rowSums(abs(coef.mx1)))[1:34]
View(coef.mx)
order(-colSums(abs(coef.mx)))[1:34]
pm.indx=order(-VI_F)[1:100]
coef.mx=rpm[,pm.indx]
coef.mx=apply(coef.mx,2,function(x){x/sum(abs(x))}) # scale all variables
order(-rowSums(abs(coef.mx)))[1:34]
order(-colSums(abs(coef.mx)))[1:34]
-rowSums(abs(coef.mx))
rowSums(abs(coef.mx))*df1_x
a=rowSums(abs(coef.mx))*df1_x
View(coef.mx)
a=rowSums(abs(coef.mx))
pm.indx=order(-VI_F)[1:14]
coef.mx=rpm[,pm.indx]
coef.mx=apply(coef.mx,2,function(x){x/sum(abs(x))}) # scale all variables
a=apply(rpm,2,function(x){x/sum(abs(x))}) # scale all variables
order(-rowSums(abs(coef.mx)))[1:34]
a=apply(rpm,2,function(x){x/sum(abs(x))}) # scale all variables
order(-rowSums(abs(a)))[1:34]
a=apply(rpm,2,function(x){x/sum(abs(x))}) # scale all variables
order(-rowSums(abs(a)))[1:14]
View(a)
set.seed(1)
tm_a={}
for (i in 1:100) {
tm=form_matrix(ncol(x), 225, FALSE, eps = 0.7, projection = "achlioptas")
tm=apply(tm,2,function(x){x/sum(abs(x))}) # scale all variables
tm_a=cbind(tm_a,tm)
}
order(-rowSums(abs(tm_a)))[1:14]
View(tm_a)
order(-rowSums(abs(coef.mx)))[1:14]
a=order(-rowSums(abs(tm_a)))[1:14]
b=order(-VI_F1)[1:34]
intersect(a,b)
c=order(-VI_F1)[1:100]
intersect(a,c)
a=order(-rowSums(abs(tm_a)))[1:100]
intersect(a,c)
a=order(-rowSums(abs(tm_a)))[1:14]
b=order(-VI_F1)[1:34]
c=order(-VI_F)[1:14]
intersect(a,c)
intersect(a,b)
set.seed(1)
tm_a={}
for (i in 1:100) {
tm=form_matrix(ncol(x), 225, FALSE, eps = 0.7, projection = "achlioptas")
#tm=apply(tm,2,function(x){x/sum(abs(x))}) # scale all variables
tm_a=cbind(tm_a,tm)
}
order(-rowSums(abs(tm_a)))[1:14]
a=order(-rowSums(abs(tm_a)))[1:14]
intersect(a,b)
View(tm)
intersect(order(-rowSums(abs(tm_a)))[1:14],order(-VI_F1)[1:34])
intersect(order(-rowSums(abs(tm_a)))[1:34],order(-VI_F1)[1:34])
intersect(order(-rowSums(abs(coef.mx)))[1:34],order(-VI_F1)[1:34])
pm.indx=order(-VI_F)[1:14]
coef.mx=rpm[,pm.indx]
coef.mx=apply(coef.mx,2,function(x){x/sum(x)}) # scale all variables
intersect(order(-rowSums(abs(coef.mx)))[1:34],order(-VI_F1)[1:34])
sqrt(506.003)
sqrt(586.1393)
pm.indx=order(-VI_F)[1:28]
coef.mx=rpm[,pm.indx]
coef.mx=apply(coef.mx,2,function(x){x/sum(abs(x))}) # scale all variables
order(-rowSums(abs(coef.mx)))[1:34]
intersect(order(-rowSums(abs(coef.mx)))[1:34],order(-VI_F1)[1:34])
pm.indx=order(-VI_F)[1:14]
coef.mx=rpm[,pm.indx]
coef.mx=apply(coef.mx,2,function(x){x/sum(abs(x))}) # scale all variables
order(-rowSums(abs(coef.mx)))[1:34]
intersect(order(-rowSums(abs(coef.mx)))[1:34],order(-VI_F1)[1:34])
